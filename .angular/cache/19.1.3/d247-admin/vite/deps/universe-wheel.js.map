{
  "version": 3,
  "sources": ["../../../../../../node_modules/universe-wheel/fesm2022/universe-wheel.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Input, Output } from '@angular/core';\nclass UniverseWheelService {\n  constructor() {}\n  static {\n    this.ɵfac = function UniverseWheelService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UniverseWheelService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UniverseWheelService,\n      factory: UniverseWheelService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniverseWheelService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nvar TextAlignment;\n(function (TextAlignment) {\n  TextAlignment[\"INNER\"] = \"inner\";\n  TextAlignment[\"OUTER\"] = \"outer\";\n  TextAlignment[\"CENTER\"] = \"center\";\n})(TextAlignment || (TextAlignment = {}));\nvar TextOrientation;\n(function (TextOrientation) {\n  TextOrientation[\"HORIZONTAL\"] = \"horizontal\";\n  TextOrientation[\"VERTICAL\"] = \"vertical\";\n  TextOrientation[\"CURVED\"] = \"curved\";\n})(TextOrientation || (TextOrientation = {}));\nclass UniverseWheelComponent {\n  constructor() {\n    this.onSpinStart = new EventEmitter();\n    this.onSpinComplete = new EventEmitter();\n    this.completedSpin = false;\n    this.isSpinning = false;\n  }\n  reset() {\n    this.wheel.stopAnimation(false);\n    this.wheel.rotationAngle = 0;\n    this.wheel.ctx.clearRect(0, 0, this.wheel.ctx.canvas.width, this.wheel.ctx.canvas.height);\n    this.isSpinning = false;\n    this.completedSpin = false;\n    this.ngAfterViewInit();\n  }\n  ngOnInit() {}\n  spin() {\n    if (this.completedSpin || this.isSpinning) return;\n    this.isSpinning = true;\n    this.onSpinStart.emit(null);\n    const segmentToLandOn = this.wheel.segments.filter(x => !!x).find(({\n      id\n    }) => this.idToLandOn === id);\n    const segmentTheta = segmentToLandOn.endAngle - segmentToLandOn.startAngle;\n    this.wheel.animation.stopAngle = segmentToLandOn.endAngle - segmentTheta / 4;\n    this.wheel.startAnimation();\n    setTimeout(() => {\n      this.completedSpin = true;\n      this.onSpinComplete.emit(null);\n    }, this.spinDuration * 1000);\n  }\n  ngAfterViewInit() {\n    const segments = this.items;\n    // @ts-ignore\n    this.wheel = new Winwheel({\n      numSegments: segments.length,\n      segments,\n      innerRadius: this.innerRadius || 0,\n      outerRadius: this.height / 2 - 20,\n      centerY: this.height / 2 + 20,\n      textOrientation: this.textOrientation,\n      textAligment: this.textAlignment,\n      animation: {\n        type: 'spinToStop',\n        // Type of animation.\n        duration: this.spinDuration,\n        // How long the animation is to take in seconds.\n        spins: this.spinAmount // The number of complete 360 degree rotations the wheel is to do.\n      }\n    });\n    // @ts-ignore\n    TweenMax.ticker.addEventListener(\"tick\", this.drawPointer.bind(this));\n  }\n  ngOnDestroy() {\n    // @ts-ignore\n    TweenMax.ticker.removeEventListener(\"tick\");\n  }\n  drawPointer() {\n    let c = this.wheel.ctx;\n    // Create pointer.\n    if (c) {\n      c.save();\n      c.lineWidth = 2;\n      c.strokeStyle = this.pointerStrokeColor;\n      c.fillStyle = this.pointerFillColor;\n      c.beginPath();\n      c.moveTo(this.width / 2 - 20, 2);\n      c.lineTo(this.width / 2 + 20, 2);\n      c.lineTo(this.width / 2, 42);\n      c.lineTo(this.width / 2 - 20, 2);\n      c.stroke();\n      c.fill();\n      c.restore();\n    }\n  }\n  static {\n    this.ɵfac = function UniverseWheelComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UniverseWheelComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: UniverseWheelComponent,\n      selectors: [[\"universe-wheel\"]],\n      inputs: {\n        height: \"height\",\n        idToLandOn: \"idToLandOn\",\n        width: \"width\",\n        items: \"items\",\n        spinDuration: \"spinDuration\",\n        spinAmount: \"spinAmount\",\n        innerRadius: \"innerRadius\",\n        pointerStrokeColor: \"pointerStrokeColor\",\n        pointerFillColor: \"pointerFillColor\",\n        disableSpinOnClick: \"disableSpinOnClick\",\n        textOrientation: \"textOrientation\",\n        textAlignment: \"textAlignment\"\n      },\n      outputs: {\n        onSpinStart: \"onSpinStart\",\n        onSpinComplete: \"onSpinComplete\"\n      },\n      decls: 2,\n      vars: 2,\n      consts: [[\"id\", \"canvas\", 3, \"click\", \"width\", \"height\"]],\n      template: function UniverseWheelComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"canvas\", 0);\n          i0.ɵɵlistener(\"click\", function UniverseWheelComponent_Template_canvas_click_0_listener() {\n            return !ctx.disableSpinOnClick && ctx.spin();\n          });\n          i0.ɵɵtext(1, \" \\xA0\\xA0\\xA0\\xA0Canvas not supported, use another browser. \");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"width\", ctx.width)(\"height\", ctx.height);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniverseWheelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'universe-wheel',\n      template: `\n    <canvas (click)='!disableSpinOnClick && spin()' id='canvas' [width]='width' [height]='height'>\n        Canvas not supported, use another browser.\n    </canvas>\n`,\n      standalone: true\n    }]\n  }], () => [], {\n    height: [{\n      type: Input\n    }],\n    idToLandOn: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    items: [{\n      type: Input\n    }],\n    spinDuration: [{\n      type: Input\n    }],\n    spinAmount: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    pointerStrokeColor: [{\n      type: Input\n    }],\n    pointerFillColor: [{\n      type: Input\n    }],\n    disableSpinOnClick: [{\n      type: Input\n    }],\n    textOrientation: [{\n      type: Input\n    }],\n    textAlignment: [{\n      type: Input\n    }],\n    onSpinStart: [{\n      type: Output\n    }],\n    onSpinComplete: [{\n      type: Output\n    }]\n  });\n})();\n\n/*\n * Public API Surface of universe-wheel\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TextAlignment, TextOrientation, UniverseWheelComponent, UniverseWheelService };\n"],
  "mappings": "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",
  "names": ["TextAlignment", "TextOrientation"]
}
